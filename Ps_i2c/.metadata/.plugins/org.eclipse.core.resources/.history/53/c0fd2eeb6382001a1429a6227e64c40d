#include "platform.h"
#include "xparameters.h"
#include "sleep.h"
#include "xiicps.h"
#include "stdio.h"


// I2C parameters
#define IIC_SCLK_RATE       100000  // clock 100KHz
#define OV7670_ADDRESS      0x42    // 7bit address 0bit=1:write 0:read
#define IIC_DEVICE_ID       XPAR_XIICPS_0_DEVICE_ID

XIicPs Iic;

int Init()
{
    int Status;
    XIicPs_Config *Config;  /**< configuration information for the device */

    Config = XIicPs_LookupConfig(IIC_DEVICE_ID);
    if(Config == NULL){
        printf("Error: XIicPs_LookupConfig()\n");
        return XST_FAILURE;
    }

    Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
    if(Status != XST_SUCCESS){
        printf("Error: XIicPs_CfgInitialize()\n");
        return XST_FAILURE;
    }

    Status = XIicPs_SelfTest(&Iic);
    if(Status != XST_SUCCESS){
        printf("Error: XIicPs_SelfTest()\n");
        return XST_FAILURE;
    }

    XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);
    printf("I2C configuration done.\n");

    return XST_SUCCESS;
}

int i2c_write(XIicPs *Iic, u8 _register, u8 _command)
{
    int Status;
    u8 buffer[2];
    buffer[0] = _register;
    buffer[1] = _command;

    Status = XIicPs_MasterSendPolled(Iic, buffer, 2, OV7670_ADDRESS);


    if(Status != XST_SUCCESS){
        return XST_FAILURE;
    }

    // Wait until bus is idle to start another transfer.
    while(XIicPs_BusIsBusy(Iic)){
        /* NOP */
    }

    return XST_SUCCESS;
}


int i2c_read(XIicPs *Iic, u8* buff, u32 len, u16 i2c_adder)
{
    int Status;

    Status = XIicPs_MasterRecvPolled(Iic, buff, len, i2c_adder);

    if (Status == XST_SUCCESS)
        return XST_SUCCESS;
    else
        return -1;
}


int main()
{
    init_platform();
    Init();

    u8    buff[4];
    u16   rawdata;
    float temp;

    while(1) {
        i2c_write(&Iic, 0, OV7670_ADDRESS);
        //i2c_read(&Iic, buff, 2, TMP102_ADDRESS);

        /*
        rawdata = ((int8_t)buff[0] << 4) | ((u8)buff[1] >> 4);
        temp = (float) ((float)rawdata * 0.0625);
        printf("Tmep: %2.1f\n", temp);
        usleep(1000*1000);      // sleep 1sec (1000 x 1000us)
        */
    }

    cleanup_platform();
    return 0;
}
